services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    env_file:
      - .env
    ports:
      - "3306:3306"
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - mysql

  earthquake_ingestor:
    build: .
    container_name: earthquake_ingestor
    restart: always
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
    #volumes:
     # - .:/app
    working_dir: /app
    command: ["python", "-u", "ingestion/main.py"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 9092:9092

  kafka-connect:
    image: debezium/connect:2.7.2.Final
    container_name: kafka-connect
    depends_on:
      - kafka
      - mysql
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    ports:
      - 8083:8083
    volumes:
      - ./connectors:/kafka/connectors
    command:
      - bash
      - -c
      - |
        /docker-entrypoint.sh &
        sleep 10
        for f in /kafka/connectors/*.json; do
          echo "Registering connector: $f"
          curl -X POST -H "Content-Type: application/json" --data @"$f" http://localhost:8083/connectors
        done
        wait


volumes:
  mysql_data:
